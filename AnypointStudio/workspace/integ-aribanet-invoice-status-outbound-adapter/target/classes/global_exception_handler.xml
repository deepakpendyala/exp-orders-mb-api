<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:apikit-soap="http://www.mulesoft.org/schema/mule/apikit-soap" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:context="http://www.springframework.org/schema/context" xmlns:cloudhub="http://www.mulesoft.org/schema/mule/cloudhub"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/cloudhub http://www.mulesoft.org/schema/mule/cloudhub/current/mule-cloudhub.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/apikit-soap http://www.mulesoft.org/schema/mule/apikit-soap/current/mule-apikit-soap.xsd">
    <!-- <cloudhub:token-config name="Cloudhub__Inhered_Token_Authentication" doc:name="Cloudhub: Inhered Token Authentication"/> -->
   <!--  <context:property-placeholder location="exception_mapping.properties"/> -->
  
  <choice-exception-strategy name="global-exception-handlerChoice_Exception_Strategy">
         <catch-exception-strategy when="#[exception.causedBy(java.net.ConnectException) || exception.causedBy(java.util.concurrent.TimeoutException) ]" doc:name="Network Exception">
            <logger message="Network Exception" level="INFO" doc:name="Log Exception to Console"/>
            <expression-component doc:name="Set Exception Details"><![CDATA[flowVars.exceptionClass = 'NETWORK_EXCEPTION';
flowVars.exceptionObject = exception.cause != null ? exception.cause : exception;
flowVars.exceptionCode = ['ERR001'];
flowVars.exceptionMessage =  exception.cause != null ? exception.cause.message : exception.message;
flowVars.exceptionHTTPStatus = 400;
flowVars.docname = exception.info.Element.lastIndexOf('(') > 0 ? exception.info.Element.substring(exception.info.Element.lastIndexOf('(')+1, exception.info.Element.indexOf(')')) : 'not defined';

]]></expression-component>
            <flow-ref name="exception-routesSub_Flow" doc:name="exception-routesSub_Flow"/>
        </catch-exception-strategy>
        <catch-exception-strategy when="#[exception.causeMatches('com.sforce.*')]" doc:name="Salesforce Common Exception">
            <logger message="Network Exception" level="INFO" doc:name="Log Exception to Console"/>
            <expression-component doc:name="Set Exception Details"><![CDATA[flowVars.exceptionClass = 'SALESFORCE_EXCEPTION';
flowVars.exceptionObject = exception.cause != null ? exception.cause : exception;
flowVars.exceptionCode = ['SFC001'];
flowVars.exceptionMessage =  exception.cause != null ? exception.cause.message : exception.message;
flowVars.exceptionHTTPStatus = 400;
flowVars.docname = exception.info.Element.lastIndexOf('(') > 0 ? exception.info.Element.substring(exception.info.Element.lastIndexOf('(')+1, exception.info.Element.indexOf(')')) : 'not defined';

]]></expression-component>
            <flow-ref name="exception-routesSub_Flow" doc:name="exception-routesSub_Flow"/>
        </catch-exception-strategy>
        <catch-exception-strategy when="#[exception.causedBy(com.mulesoft.weave.mule.exception.WeaveExecutionException)]" doc:name="Dataweave Exception">
            <logger message="Dataweave Exception" level="INFO" doc:name="Log Exception to Console"/>
            <expression-component doc:name="Set Exception Details"><![CDATA[flowVars.exceptionClass = 'DW_EXCEPTION';
flowVars.exceptionObject = exception.cause != null ? exception.cause : exception;
flowVars.exceptionCode = ['ERR002'];
flowVars.exceptionMessage =  exception.cause != null ? exception.cause.message : exception.message;
flowVars.exceptionHTTPStatus =500;
flowVars.docname = exception.info.Element.lastIndexOf('(') > 0 ? exception.info.Element.substring(exception.info.Element.lastIndexOf('(')+1, exception.info.Element.indexOf(')')) : 'not defined';
]]></expression-component>
            <flow-ref name="exception-routesSub_Flow" doc:name="exception-routesSub_Flow"/>
        </catch-exception-strategy>
         <catch-exception-strategy when="#[exception.causedBy(org.mule.extension.validation.api.ValidationException) &amp;&amp; exception.message contains 'APT']" doc:name="Salesforce Response Validation Error">
            <logger message="Non Retriable Business Exception" level="INFO" doc:name="Log Exception to Console"/>
            <expression-component doc:name="Set Exception Details"><![CDATA[flowVars.exceptionClass = 'SALESFORCE_EXCEPTION';
flowVars.exceptionObject = exception.cause != null ? exception.cause : exception;
flowVars.exceptionCode = exception.cause.message.?split(';');
flowVars.exceptionMessage = exception.muleMessage.payload[0].errors[0].statusCode + ':' + exception.muleMessage.payload[0].errors[0].message;
flowVars.exceptionHTTPStatus =500;
flowVars.docname = exception.info.Element.lastIndexOf('(') > 0 ? exception.info.Element.substring(exception.info.Element.lastIndexOf('(')+1, exception.info.Element.indexOf(')')) : 'Salesforce Response Validation';

]]></expression-component>
            <flow-ref name="exception-routesSub_Flow" doc:name="exception-routesSub_Flow"/>
        </catch-exception-strategy>
        <catch-exception-strategy when="#[exception.causedBy(org.mule.extension.validation.api.ValidationException) ]" doc:name="Non Retriable Business Exception">
            <logger message="Non Retriable Business Exception" level="INFO" doc:name="Log Exception to Console"/>
            <expression-component doc:name="Set Exception Details"><![CDATA[flowVars.exceptionClass = 'BUSINESS_EXCEPTION';
flowVars.exceptionObject = exception.cause != null ? exception.cause : exception;
flowVars.exceptionCode = exception.cause.message.?split(';');
flowVars.exceptionMessage =  exception.cause != null ? exception.cause.message : exception.message;
flowVars.exceptionHTTPStatus =500;
flowVars.docname = exception.info.Element.lastIndexOf('(') > 0 ? exception.info.Element.substring(exception.info.Element.lastIndexOf('(')+1, exception.info.Element.indexOf(')')) : 'Message Validation';

]]></expression-component>
            <flow-ref name="exception-routesSub_Flow" doc:name="exception-routesSub_Flow"/>
        </catch-exception-strategy>
        <catch-exception-strategy when="#[exception.causedBy(org.mule.module.http.internal.request.ResponseValidatorException)]" doc:name="HTTP Response Exception">
            <logger message="Non Retriable Business Exception" level="INFO" doc:name="Log Exception to Console"/>
            <expression-component doc:name="Set Exception Details"><![CDATA[flowVars.exceptionClass = 'BUSINESS_EXCEPTION';
flowVars.exceptionObject = exception.cause != null ? exception.cause : exception;
flowVars.exceptionCode = ['ERR003'];
flowVars.exceptionMessage =  exception.cause != null ? exception.cause.message : exception.message;
flowVars.exceptionHTTPStatus =500;
flowVars.docname = exception.info.Element.lastIndexOf('(') > 0 ? exception.info.Element.substring(exception.info.Element.lastIndexOf('(')+1, exception.info.Element.indexOf(')')) : 'Message Validation';

]]></expression-component>
            <flow-ref name="exception-routesSub_Flow" doc:name="exception-routesSub_Flow"/>
        </catch-exception-strategy>
         
        <catch-exception-strategy doc:name="Default Exception Handler">
            <logger message="Default exception handler catch all." level="ERROR" doc:name="Log Default Catch-All to Console"/>
            <expression-component doc:name="Set Exception Details"><![CDATA[flowVars.exceptionClass = 'UNKNOWN_EXCEPTION';
flowVars.exceptionObject = exception.cause != null ? exception.cause : exception;
flowVars.exceptionCode = ['unknown'];
flowVars.exceptionMessage =  exception.cause != null ? exception.cause.message : exception.message;
flowVars.exceptionHTTPStatus =500;
flowVars.docname = exception.info.Element.lastIndexOf('(') > 0 ? exception.info.Element.substring(exception.info.Element.lastIndexOf('(')+1, exception.info.Element.indexOf(')')) : 'not defined';

]]></expression-component>
            <flow-ref name="exception-routesSub_Flow" doc:name="exception-routesSub_Flow"/>
        </catch-exception-strategy>
      
       

       
    </choice-exception-strategy>


    <sub-flow name="exception-routesSub_Flow">
        <logger message="Exception type: #[flowVars.exceptionClass]" level="ERROR" doc:name="Log Error to Console"/>

        <message-properties-transformer doc:name="Add to Header Properties">
            <add-message-property key="EXCEPTION_MESSAGE" value="#[flowVars.exceptionClass + &quot;:&quot; + flowVars.exceptionObject.message]"/>
            <add-message-property key="http.status" value="#[flowVars.exceptionHTTPStatus]"/>
            <delete-message-property key="Content-Type"/>
        </message-properties-transformer>
        <choice tracking:enable-default-events="true" doc:name="Choice">
            <when expression="#[flowVars.ResponseContentType contains &quot;xml&quot;]">
                <dw:transform-message doc:name="Payload as XML">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace soap http://schemas.xmlsoap.org/soap/envelope/
---
{
		(flowVars.exceptionCode map ( {
			soap#Fault: {				
				faultcode: "soap:Server",
				faultactor: flowVars.docname,			
				faultstring: trim $  ++ ":" ++ p(trim $),
				detail: flowVars.exceptionClass ++ ":" ++ flowVars.exceptionMessage
			}
		}))
	}
]]></dw:set-payload>
                </dw:transform-message>


            </when>
            <when expression="#[flowVars.ResponseContentType contains &quot;json&quot;]">

                <dw:transform-message doc:name="Payload as JSON">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	id: "",
	success: false,
	errors: flowVars.exceptionCode map ( {
		Type: flowVars.exceptionClass,
		Step: flowVars.docname,
		Code: trim $,
		Description: p(trim $),
		Message: flowVars.exceptionMessage
			}	)
}]]></dw:set-payload>
                </dw:transform-message>

            </when>
            <otherwise>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	id: "",
	success: false,
	errors: flowVars.exceptionCode map ( {
		Type: flowVars.exceptionClass,
		Step: flowVars.docname,
		Code: trim $,
		Description: p(trim $),
		Message: flowVars.exceptionMessage
			}	)
}]]></dw:set-payload>
                </dw:transform-message>
            </otherwise>
        </choice>
        <logger message="**ExceptionLog** #[message.payloadAs(String)]" level="ERROR" doc:name="Logger"/>
     <!-- <cloudhub:create-notification config-ref="Cloudhub__Inhered_Token_Authentication" domain="${app.name}" message="#[payload]" priority="ERROR" doc:name="Cloudhub"/> --> 

    </sub-flow>


</mule>
